const express = require('express');
const multer = require('multer');
const bodyParser = require('body-parser');
const { MongoClient, ObjectId } = require('mongodb');
const AWS = require('aws-sdk');
const nodemailer = require('nodemailer');
const bcrypt = require('bcrypt');
const path = require('path');

const app = express();
const port = process.env.PORT || 3000;

// تنظیمات لیارا Object Storage
const s3 = new AWS.S3({
    accessKeyId: process.env.LIARA_ACCESS_KEY || 'q93lk9pelicu3rgn',
    secretAccessKey: process.env.LIARA_SECRET_KEY || '8f609904-d779-428e-9108-1abb57171f3b',
    endpoint: process.env.LIARA_ENDPOINT || 'https://storage.c2.liara.space',
    s3ForcePathStyle: true
});
const bucketName = process.env.LIARA_BUCKET_NAME || 'rent-online';

// تنظیمات Nodemailer برای Gmail
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER || 'sedghinahada@gmail.com',
        pass: process.env.EMAIL_PASS || 'otsh kgxk aaso hwuz'
    }
});

// MongoDB connection
const mongoUri = 'mongodb+srv://amir:Amir1381@cluster0.1ahamnk.mongodb.net/asn?retryWrites=true&w=majority&appName=Cluster0';
let db;
let mongoClient;

// اتصال به MongoDB
async function connectMongoDB() {
    if (db) return db;
    const maxRetries = 5;
    let retries = 0;
    while (retries < maxRetries) {
        try {
            mongoClient = await MongoClient.connect(mongoUri, {
                serverSelectionTimeoutMS: 15000,
                connectTimeoutMS: 20000
            });
            console.log('Connected to MongoDB');
            db = mongoClient.db('asn');
            return db;
        } catch (error) {
            retries++;
            console.error(`MongoDB connection attempt ${retries}/${maxRetries} failed:`, error.message);
            if (retries === maxRetries) {
                console.error('MongoDB connection failed after max retries:', error);
                throw error;
            }
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
    }
}

// Middleware برای CORS
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    if (req.method === 'OPTIONS') {
        return res.status(200).json({});
    }
    console.log(`Request received: ${req.method} ${req.path}`);
    next();
});

app.use(express.static(path.join(__dirname, 'frontend')));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// تنظیم برای آپلود فایل‌ها
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// میدل‌ور برای چک کردن ادمین
const checkAdmin = async (req, res, next) => {
    try {
        await connectMongoDB();
        const { userId } = req.body; // فرضاً از body میاد
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ _id: new ObjectId(userId) });
        if (!user || user.role !== 'admin') {
            return res.status(403).json({ message: 'دسترسی غیرمجاز' });
        }
        next();
    } catch (error) {
        res.status(500).json({ message: 'خطا در سرور', error: error.message });
    }
};

// روت برای ثبت‌نام مشتری
app.post('/api/register/customer', upload.none(), async (req, res) => {
    try {
        await connectMongoDB();

        const { fullName, email, mobile, province, city, region, password, confirmPassword, referralCode } = req.body;

        // چک کردن فیلدهای ضروری
        if (!fullName || !email || !mobile || !province || !city || !password || !confirmPassword) {
            return res.status(400).json({ message: 'فیلدهای ضروری (نام، ایمیل، موبایل، استان، شهر، رمز) پر نشده‌اند' });
        }

        // چک فرمت ایمیل و موبایل
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const mobileRegex = /^09[0-9]{9}$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({ message: 'فرمت ایمیل نادرست است' });
        }
        if (!mobileRegex.test(mobile)) {
            return res.status(400).json({ message: 'فرمت موبایل نادرست است (باید با 09 شروع شود و 11 رقم باشد)' });
        }

        // چک رمز عبور
        if (password !== confirmPassword) {
            return res.status(400).json({ message: 'رمز عبور و تأیید آن مطابقت ندارند' });
        }

        // مدیریت فیلد region (الزامی فقط برای تهران)
        const isTehran = province.toLowerCase() === 'تهران' && city.toLowerCase() === 'تهران';
        if (isTehran && !region) {
            return res.status(400).json({ message: 'برای تهران، منطقه الزامی است' });
        }

        // hashing رمز عبور
        const hashedPassword = await bcrypt.hash(password, 10);

        // چک کردن موجودیت کاربر
        const usersCollection = db.collection('users');
        const existingUserByEmail = await usersCollection.findOne({ email });
        if (existingUserByEmail) {
            return res.status(400).json({ message: 'این ایمیل قبلاً ثبت شده است' });
        }
        const existingUserByMobile = await usersCollection.findOne({ mobile });
        if (existingUserByMobile) {
            return res.status(400).json({ message: 'این موبایل قبلاً ثبت شده است' });
        }

        // ذخیره کاربر جدید
        const newUser = {
            fullName,
            email,
            mobile,
            province,
            city,
            region: isTehran ? region : null,
            password: hashedPassword,
            referralCode: referralCode || '',
            role: 'customer',
            verified: false,
            createdAt: new Date()
        };

        const result = await usersCollection.insertOne(newUser);

        // تولید و ارسال کد تأیید
        const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
        const verificationCodeExpires = new Date(Date.now() + 10 * 60 * 1000); // 10 دقیقه انقضا
        await usersCollection.updateOne(
            { _id: result.insertedId },
            { $set: { verificationCode, verificationCodeExpires } }
        );

        try {
            console.log(`✅ در حال تلاش برای ارسال ایمیل تأیید به: ${email}`);
            const info = await transporter.sendMail({
                from: `ویترانا <${process.env.EMAIL_USER || 'sedghinahada@gmail.com'}>`,
                to: email,
                subject: 'کد تأیید ثبت‌نام در ویترانا',
                html: `
                    <div dir="rtl" style="font-family: Arial, sans-serif; text-align: right;">
                        <h2>به ویترانا خوش آمدید!</h2>
                        <p>کد تأیید شما برای تکمیل ثبت‌نام:</p>
                        <p style="font-size: 24px; font-weight: bold; letter-spacing: 5px;">${verificationCode}</p>
                        <p>این کد تا ۱۰ دقیقه دیگر معتبر است.</p>
                        <hr>
                        <em>اگر شما درخواست ثبت‌نام نداده‌اید، این ایمیل را نادیده بگیرید.</em>
                    </div>
                `
            });
            console.log('✅ ایمیل با موفقیت ارسال شد. Message ID:', info.messageId);
        } catch (emailError) {
            console.error('❌ خطا در ارسال ایمیل:', emailError);
            return res.status(201).json({
                success: true,
                message: 'ثبت‌نام شما انجام شد اما در ارسال ایمیل تأیید خطایی رخ داد. لطفاً بعداً از صفحه ورود، گزینه "ارسال مجدد کد" را امتحان کنید.',
                userId: mobile
            });
        }

        return res.status(201).json({ success: true, message: 'ثبت‌نام موفق، کد تأیید به ایمیل شما ارسال شد', userId: mobile });
    } catch (error) {
        console.error('خطا در ثبت مشتری:', error.message, error.stack);
        if (!res.headersSent) {
            return res.status(500).json({ message: 'خطا در سرور', error: error.message });
        }
    }
});

// چک تکراری عمومی (برای مراحل)
app.post('/api/check-uniqueness', async (req, res) => {
    try {
        await connectMongoDB();
        const { email, mobile, nationalCode } = req.body;
        const usersCollection = db.collection('users');
        const query = {};
        if (email) query.email = email;
        if (mobile) query.mobile = mobile;
        if (nationalCode) query.nationalCode = nationalCode;

        const existing = await usersCollection.findOne(query);
        if (existing) {
            return res.status(400).json({ message: 'فیلد تکراری است', field: Object.keys(query)[0] });
        }
        res.json({ message: 'OK' });
    } catch (error) {
        console.error('خطا در چک تکراری:', error.message, error.stack);
        res.status(500).json({ message: 'خطا در چک' });
    }
});

// ارسال پیام عمومی
app.post('/api/admin/public-message/:type', checkAdmin, async (req, res) => {
    try {
        await connectMongoDB();
        const { type } = req.params;
        const { message, shopId } = req.body;
        const messagesCollection = db.collection('messages');
        if (type === 'all') {
            const usersCollection = db.collection('users');
            const owners = await usersCollection.find({ role: 'shop_owner' }).toArray();
            const bulkOps = owners.map(owner => ({
                insertOne: { document: { shopId: owner.shopId, message, from: 'admin', createdAt: new Date() } }
            }));
            await messagesCollection.bulkWrite(bulkOps);
            res.json({ message: 'پیام به همه ارسال شد' });
        } else if (type === 'single') {
            await messagesCollection.insertOne({ shopId, message, from: 'admin', createdAt: new Date() });
            res.json({ message: 'پیام ارسال شد' });
        }
    } catch (error) {
        console.error('خطا در ارسال عمومی:', error.message, error.stack);
        res.status(500).json({ message: 'خطا در ارسال عمومی', error: error.message });
    }
});

// پیام‌های مغازه‌دار
app.get('/api/owner/messages', async (req, res) => {
    try {
        await connectMongoDB();
        const shopId = req.query.shopId;
        const messagesCollection = db.collection('messages');
        const messages = await messagesCollection.find({ shopId }).toArray();
        res.json(messages);
    } catch (error) {
        console.error('خطا در پیام‌ها:', error.message, error.stack);
        res.status(500).json({ message: 'خطا در پیام‌ها', error: error.message });
    }
});

// وضعیت مغازه‌دار
app.get('/api/owner/status', async (req, res) => {
    try {
        await connectMongoDB();
        const shopId = req.query.shopId;
        const usersCollection = db.collection('users');
        const owner = await usersCollection.findOne({ shopId });
        res.json({ banned: owner.banned, restricted: owner.restricted });
    } catch (error) {
        console.error('خطا در وضعیت:', error.message, error.stack);
        res.status(500).json({ message: 'خطا در وضعیت', error: error.message });
    }
});

// سرور listen
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});